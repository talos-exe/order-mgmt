<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Create Shipping Order" xml:space="preserve">
    <value>创建发货订单</value>
  </data>
  <data name="Tracking Number" xml:space="preserve">
    <value>追踪号码</value>
  </data>
  <data name="Inventory" xml:space="preserve">
    <value>库存</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>姓名</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>地址</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>城市</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>州/省</value>
  </data>
  <data name="Postal Code" xml:space="preserve">
    <value>邮政编码</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>国家</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>电话</value>
  </data>
  <data name="Cancel " xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="Are you sure you want to cancel shipment" xml:space="preserve">
    <value>您确定要取消货运吗？</value>
  </data>
  <data name="You cannot undo this action" xml:space="preserve">
    <value>您无法撤销此操作</value>
  </data>
  <data name="Go Back" xml:space="preserve">
    <value>返回</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>确认</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>创建</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>关闭</value>
  </data>
  <data name="Invalid shipment data." xml:space="preserve">
    <value>无效的货运数据。</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>创建货运时出错。</value>
  </data>
  <data name="Shipment {0} canceled successfully." xml:space="preserve">
    <value>货运 {0} 已成功取消。</value>
  </data>
  <data name="Error while canceling shipment." xml:space="preserve">
    <value>取消货运时出错。</value>
  </data>
  <data name="Country Code" xml:space="preserve">
    <value>国家代码</value>
  </data>
  <data name="Phone Number" xml:space="preserve">
    <value>电话号码</value>
  </data>
  <data name="Recipient Name" xml:space="preserve">
    <value>收件人姓名</value>
  </data>
  <data name="Shipping" xml:space="preserve">
    <value>运输</value>
  </data>
  <data name="No shipments found" xml:space="preserve">
    <value>未找到运输记录</value>
  </data>
  <data name="Shipments" xml:space="preserve">
    <value>运输记录</value>
  </data>
  <data name="Inbound Shipments" xml:space="preserve">
    <value>入库运输</value>
  </data>
  <data name="Currently Inbound" xml:space="preserve">
    <value>当前入库</value>
  </data>
  <data name="Outbound Shipments" xml:space="preserve">
    <value>出库运输</value>
  </data>
  <data name="Shipping to Customers" xml:space="preserve">
    <value>正在发往客户</value>
  </data>
  <data name="Shipping Requests" xml:space="preserve">
    <value>运输请求</value>
  </data>
  <data name="Search by tracking number or name" xml:space="preserve">
    <value>按追踪号码或姓名搜索</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>搜索</value>
  </data>
  <data name="All Shipments" xml:space="preserve">
    <value>所有运输记录</value>
  </data>
  <data name="Cancelled Only" xml:space="preserve">
    <value>仅显示已取消</value>
  </data>
  <data name="All Except Cancelled" xml:space="preserve">
    <value>除取消外全部</value>
  </data>
  <data name="Shipping Requests / Rates" xml:space="preserve">
    <value>运输请求 / 运费</value>
  </data>
  <data name="Page" xml:space="preserve">
    <value>页</value>
  </data>
  <data name="Shipment ID" xml:space="preserve">
    <value>运输编号</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>状态</value>
  </data>
  <data name="Create Shipping Request" xml:space="preserve">
    <value>创建发货请求</value>
  </data>
</root>